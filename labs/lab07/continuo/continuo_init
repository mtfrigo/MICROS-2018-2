#! /bin/sh
### BEGIN INIT INFO
# Provides:          eng10032lab07_2
# Required-Start:    
# Should-Start:      
# Required-Stop:     
# Default-Start:     S
# Default-Stop:
# Short-Description: Configures GPIO and ADC for Lab 07.
# Description:       Configures GPIO and ADC for Lab 07.
### END INIT INFO

case "$1" in
    start|restart|force-reload)
	# gpio49 = in = neither pull-up nor pull-down
	if [ ! -d /sys/class/gpio/gpio49 ] ; then
	    echo -n "49" > /sys/class/gpio/export
	fi
	echo -n "in" > /sys/class/gpio/gpio49/direction

	# gpio51 = in = neither pull-up nor pull-down
	if [ ! -d /sys/class/gpio/gpio51 ] ; then
	    echo -n "51" > /sys/class/gpio/export
	fi
	echo -n "in" > /sys/class/gpio/gpio51/direction

	# gpio53 = in = neither pull-up nor pull-down
	if [ ! -d /sys/class/gpio/gpio53 ] ; then
	    echo -n "53" > /sys/class/gpio/export
	fi
	echo -n "in" > /sys/class/gpio/gpio53/direction

	# gpio55 = in = neither pull-up nor pull-down
	if [ ! -d /sys/class/gpio/gpio55 ] ; then
	    echo -n "55" > /sys/class/gpio/export
	fi
	echo -n "in" > /sys/class/gpio/gpio55/direction
        
        for i in {0..3} ; do

            chgrp adc /sys/bus/iio/devices/iio:device0/in_voltage"$i"_scale
            chmod g+r /sys/bus/iio/devices/iio:device0/in_voltage"$i"_scale
            
            chgrp adc /sys/bus/iio/devices/iio:device0/scan_elements/in_voltage"$i"_en
            chmod g+rw /sys/bus/iio/devices/iio:device0/scan_elements/in_voltage"$i"_en
            
        done;

        chgrp adc /sys/bus/iio/devices/iio:device0/scan_elements/in_timestamp_en
        chmod g+rw /sys/bus/iio/devices/iio:device0/scan_elements/in_timestamp_en
	
        chgrp adc /sys/bus/iio/devices/iio:device0/buffer/enable
        chmod g+rw /sys/bus/iio/devices/iio:device0/buffer/enable
        chgrp adc /sys/bus/iio/devices/iio:device0/buffer/length
	    chmod g+rw /sys/bus/iio/devices/iio:device0/buffer/length
	
        modprobe iio-trig-sysfs
        echo -n "0" > /sys/bus/iio/devices/iio_sysfs_trigger/add_trigger
        
        chgrp adc /sys/bus/iio/devices/trigger0/trigger_now
	    chmod g+w /sys/bus/iio/devices/trigger0/trigger_now
	
	    modprobe iio-trig-hrtimer
       	echo -n "1" > /sys/bus/iio/devices/iio_hrtimer_trigger/add_trigger
        
        chgrp adc /sys/bus/iio/devices/trigger1/frequency
        chmod g+rw /sys/bus/iio/devices/trigger1/frequency
        
        chgrp adc /sys/bus/iio/devices/iio:device0/trigger/current_trigger
        chmod g+rw /sys/bus/iio/devices/iio:device0/trigger/current_trigger
        
        chgrp adc /dev/iio:device0
        chmod g+r /dev/iio:device0
    	;;
    stop)

	echo "\n" > /sys/bus/iio/devices/iio:device0/trigger/current_trigger
	
	echo -n "1" > /sys/bus/iio/devices/iio_hrtimer_trigger/remove_trigger
	rmmod iio-trig-hrtimer

	echo -n "0" > /sys/bus/iio/devices/iio_sysfs_trigger/remove_trigger
	rmmod iio-trig-sysfs
	
	echo -n "49" > /sys/class/gpio/unexport
	echo -n "51" > /sys/class/gpio/unexport
	echo -n "53" > /sys/class/gpio/unexport
	echo -n "55" > /sys/class/gpio/unexport
    
	;;
    status)
    	cat /sys/bus/iio/devices/iio:device0/trigger/current_trigger
	;;
    *)
	echo -n "Usage: $0 " 
	echo "{start|stop|restart|force-reload|status}"
	exit 1
	;;
esac

exit 0

if((b_pfd.fd=open("/sys/class/gpio/gpio1/value",O_RDONLY)) < 0)
        {
                perror("Opening gpio1:");
                return -1;
        }

        read(b_pfd.fd,&b_value,1);
        b_pfd.events = POLLPRI;

        act.sa_handler = quit;
        sigaction(SIGINT, &act, NULL);
        sigaction(SIGTERM, &act, NULL);

        int lcd_fd = lcd_init();
        lcd_backlight_init(lcd_fd);
        lcd_backlight_set(lcd_fd, 255, 255, 255);

        p_fd = openADC('0');
        setup_servo('1');

        pputs("/sys/class/gpio/gpio1/edge","falling");

        char lcd_angle[16] = "";
        char lcd_saved_angle[16] = "";
        float saved_angle = 0;
        float rad_saved_angle = 0;

        

        while(run)
        {
                lseek(p_fd,0,SEEK_SET);
                read(p_fd, p_raw_data, sizeof p_raw_data);
                p_raw = atoi(p_raw_data);
                
                float angle = util_map(p_raw, 0, 4096, -90, 90);
                float rad_angle = (angle * M_PI)/180;

                int b_poll_result = poll(&b_pfd, 1, 1);

                // Se o botao foi clicado
                if(b_poll_result != -1 && b_poll_result != 0)
                {
                        lseek(b_pfd.fd,0,SEEK_SET);
                        read(b_pfd.fd,&b_value,1);

                        saved_angle = angle;
                        rad_saved_angle = rad_angle;
                }

                servo_duty_cicle = (rad_angle/M_PI_2)*900000+1500000;

                if(angle > 0)
                {
                        if(angle > 1.1*saved_angle)
                        {
                                lcd_backlight_set(lcd_fd, 255, 0, 0);
                        }
                        else if(angle < 0.9*saved_angle)
                        {
                                lcd_backlight_set(lcd_fd, 255, 255, 0);
                        }
                        else
                        {
                                lcd_backlight_set(lcd_fd, 0, 255, 0);
                        }
                }
                else
                {
                        if(angle > 0.9*saved_angle)
                        {
                                lcd_backlight_set(lcd_fd, 255, 0, 0);
                        }
                        else if(angle < 1.1*saved_angle)
                        {
                                lcd_backlight_set(lcd_fd, 255, 255, 0);
                        }
                        else
                        {
                                lcd_backlight_set(lcd_fd, 0, 255, 0);
                        }
                }

                char str[100];
                snprintf(str,sizeof str,"%d\n", servo_duty_cicle);
                setDutycycle(str, '1');

                snprintf(lcd_angle, sizeof lcd_angle, "%.2f;%.2f", angle, rad_angle);
                snprintf(lcd_saved_angle, sizeof lcd_angle, "%.2f;%.2f", saved_angle, rad_saved_angle);

                lcd_write_words(lcd_fd, lcd_angle, lcd_saved_angle);

                usleep(50000);
        }

        close(p_fd);
        pputs("/sys/class/gpio/gpio1/edge","none");

        close(b_pfd.fd);